给定一个仅包含大小写字母和空格 ' ' 的字符串 s，返回其最后一个单词的长度。如果字符串从左向右滚动显示，
那么最后一个单词就是最后出现的单词。

如果不存在最后一个单词，请返回 0 。

说明：一个单词是指仅由字母组成、不包含任何空格字符的 最大子字符串。
class Solution {
    public int lengthOfLastWord(String s) {
        int len=s.length()-1;
        while(len>=0 && s.charAt(len)==' '){
            len--;
        }
        if (len <0){
            return 0;
        }
        int start =len;
        while (start >= 0 && s.charAt(start) != ' '){
            start --;
        }
         return len-start;
    }
}

给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。

初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 有足够的空间（空间大小等于 m + n）
来保存 nums2 中的元素。

示例 1：

输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
输出：[1,2,2,3,5,6]
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
      for (int i=0;i<n;i++){
          nums1[m+i]=nums2[i];
      }
      //选择排序
      int len=n+m;
      int index=0;
      for(int i=0;i<len-1;i++){
          index=0;
          for (int j=0;j<=len-1-i;j++){
              if(nums1[index]<nums1[j]){
                  index=j;
              }
          }
          int temp=nums1[len-i-1];
          nums1[len-i-1]=nums1[index];
          nums1[index]=temp;
      }
    }
}