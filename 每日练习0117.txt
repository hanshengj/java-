给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串 ransom
 能不能由第二个字符串 magazines 里面的字符构成。如果可以构成，返回 true ；否则返回 false。

(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。
杂志字符串中的每个字符只能在赎金信字符串中使用一次。)
注意：

你可以假设两个字符串均只含有小写字母。

canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true

class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        //将字符串转化成数组
         char[] chars1 = ransomNote.toCharArray();
        char[] chars2 = magazine.toCharArray();
        //若赎金信数组长度大于杂志，直接返false
        if (chars1.length > chars2.length) {
            return false;
        }
        //统计每个字符串中字母的个数
        int[] rans = new int[26];
        int[] maga = new int[26];
        for (char c : chars1) {
            rans[c - 'a']++;
        }
        for (char c : chars2) {
            maga[c - 'a']++;
        }
        //只要有一个赎金信里的字母数大于杂志里的，直接返回false
        //否则返回true
        for (int i = 0; i < rans.length ; i++) {
            if (rans[i] > maga[i]) {
                return false;
            }
        }
        return true;

    }
}
判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

示例 1:

输入: 121
输出: true
示例 2:

输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:

输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数


class Solution {
    public boolean isPalindrome(int x) {
        if(x<0 || x%10==0 &&x!=0){
            return false;
        }
        int x1=x;
        int reverse=0;
        while(x>0){
            reverse=reverse*10 + x%10;
            x=x/10;
        }
         if (reverse==x1){
             return true;
         }else{
             return false;
         }
    }
}