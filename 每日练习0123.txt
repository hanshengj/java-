给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。
 # 代表退格字符。
注意：如果对空文本输入退格字符，文本继续为空。

示例 1：

输入：S = "ab#c", T = "ad#c"
输出：true
解释：S 和 T 都会变成 “ac”。
class Solution {
    public boolean backspaceCompare(String S, String T) {
        //先解码，再比较
        //字符串S解码
        int outS = 0;//定义当前退格数量
        StringBuilder sbS = new StringBuilder();//初始化解码后字符串
        for(int i=S.length()-1;i>=0;i--){//倒序遍历
            char ch = S.charAt(i);//获取当前字符
            if('#'==ch){//如果是#，当前退格数量自增
                outS++;
            } else {
                if(outS>0){//如果当前退格数量大于0，不记录当前字符，当前退格数量自减
                    outS--;
                } else {//反之则记录当前字符的值
                    sbS.append(ch);
                }
            }
        }
        String s = sbS.reverse().toString();//此处可以反转，也可以不反转，s和t均不反转，直接比较也可

        //字符串T解码，与S过程完全相同
        int outT = 0;
        StringBuilder sbT = new StringBuilder();
        for(int i=T.length()-1;i>=0;i--){
            char ch = T.charAt(i);
            if('#'==ch){
                outT++;
            } else {
                if(outT>0){
                    outT--;
                } else {
                    sbT.append(ch);
                }
            }
        }
        String t = sbT.reverse().toString();
        return Objects.equals(s,t);//返回比较结果
    }
}

根据 逆波兰表示法，求表达式的值。

有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

 

说明：

整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
 

示例 1：

输入: ["2", "1", "+", "3", "*"]
输出: 9
解释: 该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
class Solution {
    public int evalRPN(String[] tokens) {
  Deque<Integer> stack = new ArrayDeque<>();
        for (int i = 0; i < tokens.length; i++) {
            switch (tokens[i]) {
                case "+":
                    stack.push(stack.pop() + stack.pop());
                    break;
                case "-":
                    int a = stack.pop();
                    stack.push(stack.pop() - a); //第二个栈顶减第一个栈顶
                    break;
                case "*":
                    stack.push(stack.pop() * stack.pop());
                    break;
                case "/":
                    int b = stack.pop();
                    stack.push(stack.pop() / b); //第二个栈顶除以第一个栈顶
                    break;
                default:
                    stack.push(Integer.parseInt(tokens[i]));
                    break;
            }
        }
        return stack.pop();

    }
}