给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

 

示例 1:

给定 nums = [3,2,2,3], val = 3,

函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。

你不需要考虑数组中超出新长度后面的元素。
示例 2:

给定 nums = [0,1,2,2,3,0,4,2], val = 2,

函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。


class Solution {
    public int removeElement(int[] nums, int val) {
        int len= nums.length;
        int i=0;
        while(i<len){
            if(nums[i]==val){//若当前值等于val，值将其后的所有值向前移动
                for(int j=i;j<len-1;j++){
                    nums[j]=nums[j+1];
                }
                len--;//长度减一
                i=0;//从头开始遍历
                }else{
                    i++;//当前值不要等于val时，继续往后遍历
                }
                if(len==1 &&nums[0]==val){
                    len--;//如果只剩下一个元素时，且等于val
                    nums[i]=0;
            }
          
        }
        return len;
    }
}


给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，
返回它将会被按顺序插入的位置。

你可以假设数组中无重复元素。

class Solution {
    public int searchInsert(int[] nums, int target) {
        int len=nums.length;
        int left=0;
        int right=len-1;
        int middle=0;
        while(left<right){
           middle=(left+right)/2;
          if(nums[middle]<target){
              left=middle+1;
          } else if(nums[middle]>target) {
              right=middle-1; 
          }else{
              return middle;
          }
        }
         middle=0;
         if (nums[middle]<target){
            while(nums[middle]<target ){
                if(middle==len-1){
                    return middle+1;
                }
              middle++;
            }
            return middle;
        }else {
            return middle; 
        }
    }
}

