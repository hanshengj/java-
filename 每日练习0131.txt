给定两个以升序排列的整形数组 nums1 和 nums2, 以及一个整数 k。

定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自 nums2。

找到和最小的 k 对数字 (u1,v1), (u2,v2) ... (uk,vk)。

示例 1:

输入: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
输出: [1,2],[1,4],[1,6]
解释: 返回序列中的前 3 对数：
     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<List<Integer>> res = new ArrayList<>();
        k = Math.min(k,nums1.length*nums2.length); //注意k的取值
        if(k==0) return res;
        
        Queue<int[]> Q = new PriorityQueue<>(k,(o1,o2)->o2[0]+o2[1]-o1[0]-o1[1]);
        for(int e1:nums1)
            for(int e2:nums2){
                if(Q.size()<k) {
                    Q.offer(new int[]{e1,e2});
                }else if(e1+e2<=Q.peek()[0]+Q.peek()[1]){
                    Q.poll();
                    Q.offer(new int[]{e1,e2});
                }       
            }
        while(k-->0){
            int[] e = Q.poll();
            res.add(0,Arrays.asList(e[0],e[1]));
        }
        
        return res;
        
    }
}

