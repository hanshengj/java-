给你一个非空数组，返回此数组中 第三大的数 。如果不存在，则返回数组中最大的数。

示例 1：

输入：[3, 2, 1]
输出：1
解释：第三大的数是 1 。
class Solution {
    public int thirdMax(int[] nums) {
int len=nums.length;
if(len==1){
    return nums[0];
}
if(len==2){
    return nums[0]>=nums[1]? nums[0] :nums[1];
}
Arrays.sort(nums);
int max=nums[len-1];
int n=1;
    for (int j=len-2;j>=0;j--){
       if(max>nums[j]){
           max=nums[j];
           n++;
       }
       if(n==3){
           return nums[j];
       }
    }
      return nums[len-1];
    }
}

给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头
class Solution {
    public int[] plusOne(int[] digits) {
     for(int i=digits.length-1;i>=0;i--){
         digits[i]++;
         digits[i]=digits[i]%10;
         if(digits[i]!=0){
             return digits;
         }
     }
     //全9999情况
     digits=new int[digits.length+1];
     digits[0]=1;
     return digits;
    }
}
